class Solution {
public:

    void solve(vector<vector<string>>&ans,int n,vector<string> &board, vector<int>&leftRow,vector<int>&lowerDiagonal,vector<int>&upperDiagonal, int col){
        if(col==n){
            ans.push_back(board);
        }

        for(int row = 0;row<n;row++){
            if(leftRow[row]==0 && lowerDiagonal[row+col]==0 &&upperDiagonal[(n-1) + (col-row)]==0){     
                board[row][col]='Q';
                leftRow[row] =1;
                lowerDiagonal[row+col]=1;
                upperDiagonal[(n-1) + (col-row)]=1;
                solve(ans,n,board,leftRow,lowerDiagonal,upperDiagonal,col+1);
                board[row][col]='.';
                leftRow[row] =0;
                lowerDiagonal[row+col]=0;
                upperDiagonal[(n-1) + (col-row)]=0;
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i =0 ;i < n ;i++){
            board[i]=s;
        }
         vector<int> leftRow(n,0) ,upperDiagonal(2*n-1,0) , lowerDiagonal(2*n-1,0);
        solve(ans,n,board,leftRow,lowerDiagonal,upperDiagonal,0);
        return ans;
    }
};
