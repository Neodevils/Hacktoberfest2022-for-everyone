Problem:
494. Target Sum
You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
Example 2:

Input: nums = [1], target = 1
Output: 1
 

Constraints:

1 <= nums.length <= 20
0 <= nums[i] <= 1000
0 <= sum(nums[i]) <= 1000
-1000 <= target <= 1000




class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int totalSum=0;
        for(int i=0;i<n;i++) totalSum += nums[i];
        
        if(totalSum - target < 0 || (totalSum - target)%2) return 0;
        
        int k = (totalSum-target)/2;
        vector<vector<int>> dp(n+1,vector<int>(k+1,0));
        for(int i=0;i<n+1;i++){
            for(int j=0;j<k+1;j++){
                if(i==0){
                    dp[i][j]=0;
                }
                if(j==0){
                    dp[i][j]=1;
                }
            }
        }
        
        for(int i=1;i<n+1;i++){
            for(int j=0;j<k+1;j++){
                int notTake = dp[i-1][j];
                int take = 0;
                if(nums[i-1] <= j){
                    take = dp[i-1][j-nums[i-1]];
                }
                dp[i][j] = take + notTake;
            }
        }
        
        
        return dp[n][k];
        
    }
};